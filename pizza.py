# -*- coding: utf-8 -*-
"""pizza.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWqoEL1imPL5LYSgD4JJW_mpdz1ke3Xy
"""

import tensorflow as tf
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten,GlobalAveragePooling2D,MaxPooling2D,Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
import glob
import matplotlib.pyplot as plt
import os
import pathlib as pa

data='/content/drive/MyDrive/Data/pizza_not_pizza'

folders=glob.glob('/content/drive/MyDrive/Data/pizza_not_pizza/*')
folders

total_images=glob.glob('/content/drive/MyDrive/Data/pizza_not_pizza/*/*jpg')
len(total_images)

IMG_SIZE=[224,224]
BATCH_SIZE=32
train_ds=tf.keras.utils.image_dataset_from_directory(data,validation_split=0.2,batch_size=BATCH_SIZE,image_size=IMG_SIZE,
                                                     subset='training',shuffle=True,seed=123)
valid_ds=tf.keras.utils.image_dataset_from_directory(data,validation_split=0.2,batch_size=BATCH_SIZE,image_size=IMG_SIZE,
                                                     subset='validation',shuffle=True,seed=123)

class_name=train_ds.class_names
class_name

for image_batch,label_batch in train_ds.take(1):
  plt.imshow(image_batch[0].numpy().astype('uint8'))
  plt.title(class_name[label_batch[0]])
  plt.axis('off')

fig=plt.figure(figsize=(10,10))
for image_batch,label_batch in train_ds.take(1):
  for i in range(9):
    fig.add_subplot(3,3,i+1),plt.imshow(image_batch[i].numpy().astype('uint8'))
    plt.title(class_name[label_batch[i]])
    plt.axis('off')

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
valid_ds = valid_ds.cache().prefetch(buffer_size=AUTOTUNE)

data_augmentation = tf.keras.Sequential(
  [
    tf.keras.layers.RandomFlip("horizontal"),
    tf.keras.layers.RandomRotation(0.1),
    tf.keras.layers.RandomZoom(0.1),
  ]
)
fig=plt.figure(figsize=(10,10))
for images, _ in train_ds.take(1):
  for i in range(9):
    augmented_images = data_augmentation(images)
    fig.add_subplot(3,3,i+1),plt.imshow(augmented_images[0].numpy().astype("uint8"))
    plt.axis("off")

IMG_SHAPE = IMG_SIZE + [3]
base_model = VGG16(input_shape=IMG_SHAPE, weights='imagenet', include_top=False)
base_model.summary()

image_batch, label_batch = next(iter(train_ds))
feature_batch = base_model(image_batch)
print(feature_batch.shape)

base_model.trainable = False
base_model.summary()

inputs = base_model.input
x = data_augmentation(inputs)
x = preprocess_input(x)
x = base_model(x, training=False)
global_average_layer = GlobalAveragePooling2D()
x=global_average_layer(x)
x = Dropout(0.2)(x)
outputs=Dense(len(folders),name='classification', activation='softmax')(x)
model = Model(inputs, outputs)
model.summary()

model.compile(optimizer='adam',loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
history = model.fit(train_ds,
                    epochs=10,
                    validation_data=valid_ds)

# plot the loss
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

from keras.models import load_model

model.save('model_vgg16.h5')

y_pred = model.predict(valid_ds)
import numpy as np
y_pred = np.argmax(y_pred, axis=1)
y_pred

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

img=image.load_img('/content/drive/MyDrive/Data/pizza_not_pizza/pizza/1008104.jpg',target_size=(224,224))
x=image.img_to_array(img)
x.shape

x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

model.predict(img_data)
a=np.argmax(model.predict(img_data), axis=1)
if(a==0):
    print(" Its Not a pizza")
else:
    print(" Its a Pizza")